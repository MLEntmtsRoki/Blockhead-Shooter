<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_Player</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>spr_mask_Player</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Create

player_init(5,2,2);
player_init_gun(10,1,obj_Player_gun);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Steps

// Move Keys
move_key_R = keyboard_check(ord('D'));
move_key_D = keyboard_check(ord('S'));
move_key_L = keyboard_check(ord('A'));
move_key_U = keyboard_check(ord('W'));
// Action Keys
move_key_reload = keyboard_check_pressed(ord('R'));
move_key_shoot = mouse_check_button(mb_left);
//

// Movement
// Horizontal
if (move_key_R) {
    player_move_horiz("right",par_Solid,move_speed);
} else if (move_key_L) {
    player_move_horiz("left",par_Solid,move_speed);
} else {
    player_move_stop("horiz");
}
// Vertical
if (move_key_D) {
    player_move_vert("down",par_Solid,move_speed);
} else if (move_key_U) {
    player_move_vert("up",par_Solid,move_speed);
} else {
    player_move_stop("vert");
}
// Implementation
x += move_speed_horiz;
y += move_speed_vert;
collision_safe(par_Solid);
//

// Guns
// Shooting
if (gun_shoot_canShoot) {
    if (gun_ammo &gt; 0) {
        if (move_key_shoot) {
            if (gun_shoot_delay) {
                gun_shoot = 1;
            } else {
                gun_shoot_delay += 0.1;
            }
        } else {
            if (gun_shoot_delay &gt; 0) {
                gun_shoot_delay -= 0.1;
            }
        }
    }
}
// Reloading
if (gun_ammo &lt; gun_ammo_max) {
    if (move_key_reload) {
        gun_reload_isReloading = 1; // activate gun animation
    }
}
//

// Image
// Flipping
if (cursor_target.x &gt; x) {
    image_xscale = 1;
} else if (cursor_target.x &lt; x) {
    image_xscale = -1;
}
// Animation
if (player_move_check("horiz") || player_move_check("vert")) {
    image_speed_ave = abs(move_speed_horiz) + abs(move_speed_vert);
    image_speed_use = image_speed_ave * 0.1;
    player_animate(spr_Player_walk,image_speed_use);
} else {
    player_animate(spr_Player,0);
}
//
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_text(0,0,string(gun_ammo));
draw_text(0,16,string(gun_shoot_delay));
draw_text(0,32,string(gun_shoot_canShoot));
draw_text(0,48,string(gun_reload_isReloading));
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
